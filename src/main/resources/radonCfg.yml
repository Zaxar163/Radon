# Optimize the bytecode
optimizer:
  # Inline GOTO->GOTO sequences
  inline_goto_goto: true

  # Inline GOTO->(RETURN/IRETURN/LRETURN/FRETURN/DRETURN/ARETURN) sequences
  inline_goto_return: true

  # Remove nops
  remove_nops: true

# Obfuscates the flow of the bytecode
flow_obfuscation:
  # Swap out GOTO instructions to create more CFG edges
  replace_goto: false

  # Insert fake switches in the bytecode more CFG edges
  insert_bogus_switch_jumps: true

  # Insert fake if-confitions to create more CFG edges
  insert_bogus_jumps: true

  # Reorder the bytecode by splitting it in half multiple times
  split_blocks: true

  # Insert fake try-catch blocks (WARNING: will bloat JAR)
  fake_catch_blocks: true

  # Replace IF_ACMP<EQ/NE> with try-catch blocks
  mutilate_null_check: true

# Obfuscate API references
reference_obfuscation:
  # Hide field gets/sets and method invocations using a slow dynamic invoker
  hide_with_indy: false
  
  # Hide method invocations using a relatively fast dynamic invoker
  hide_with_fast_indy: true

# Encrypt string constants
string_encryption:
  # Compute decryption keys based on the context of the decryption call
  # Note: slows down runtime
  check_context: true

  # Pool strings into field
  pool_strings: true

# Apply ACC_SYNTHETIC (0x1000) and ACC_BRIDGE (0x0040) access flags to classes/methods/fields
hide_code:
  # Apply ACC_SYNTHETIC (0x1000) access flags
  hide_classes: false

  # Apply ACC_SYNTHETIC (0x1000) and ACC_BRIDGE (0x0040) access flags
  hide_methods: false

  # Apply ACC_SYNTHETIC (0x1000) access flags
  hide_fields: true

# Scramble numerical constants
number_obfuscation:
  # Compute XOR keys based on the context
  context_checking: true

  # Allow Radon to tamper with integers
  integer_tampering: true

  # Allow Radon to tamper with longs
  long_tampering: true

  # Allow Radon to tamper with floats
  float_tampering: true

  # Allow Radon to tamper with doubles
  double_tampering: true

  # Use bitwise (&, |, ^, <<, >>, >>>) operations to obscure (integers and longs only)
  bitwise_operations: true

  # Use arithmetic (+, -, *, /, %) operations to obscure
  arithmetic_operations: true

# Pack the output JAR to reduce size
packer: false

# Prevent tampering with the output JAR (disabled)
anti_tamper: false

# Rename resources
resource_renamer: false

# Randomize the order of fields and methods
member_shuffler:
  # Randomize the order of fields
  shuffle_fields: true

  # Randomize the order of methods
  shuffle_methods: true
# Corrupt the output JAR CRCs to prevent extraction
corrupt_crc: false

# Translate the bytecode into a custom instruction set
virtualizer: false

# Prevent debugging
anti_debug:
  message: "02"

# Move static initialization into a static block
static_initialization: true

# Insert illegal annotations to crash FernFlower
bad_annotation: true

# Watermark the output JAR to uniquely identify the copy
watermark:
  # Message to embed / hide
  message: "TTT"

  # Key to encrypt the message with
  key: "HARD2CRACK"

# Level of compression to use on the output JAR
compression_level: 9

# Name generation dictionary to use (custom)
dictionary: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

# Initial string length for randomly generated strings
randomized_string_length: 1

# Fake classes to add to the output JAR for confusion
trash_classes: 10

# Exclusions to mask certain classes or their members from being tampered with
exclusions:
  # Reference obfuscate classes with names only match the regex pattern "me/itzsomebody/counter.*"
  - "!reference_obfuscation: me/itzsomebody/counter.*"

  # Exclude library classes which match the regex pattern "org/objectweb/asm.*" from being obfuscated
  - "flow_obfuscation: pro/gravit/repackage.*"
  - "string_encryption: pro/gravit/repackage.*"
  - "hide_code: pro/gravit/repackage.*"
  - "number_obfuscation: pro/gravit/repackage.*"
  - "anti_tamper: pro/gravit/repackage.*"
  - "virtualizer: pro/gravit/repackage.*"